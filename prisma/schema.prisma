// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  name          String?
  role          String    @default("client") // "client" or "admin"
  emailVerified Boolean?  @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt 
  image         String?
  sessions      Session[]
  accounts      Account[]
  appointments  Appointment[] @relation("ClientAppointments")

  services     Service[]  @relation("ServiceCreator")
  employeeInfo Employee[] @relation("EmployeeUser")
  @@map("user")
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Service {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  features    String[]        // e.g., ["Shampoo", "Blow Dry"]
  duration    Int             // Duration in minutes
  price       Float
  createdBy   String          @db.ObjectId
  creator     User            @relation("ServiceCreator", fields: [createdBy], references: [id])
  serviceEmployees ServiceEmployee[] // Explicit join collection
  appointments Appointment[]   @relation("ServiceAppointments")
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("service")
}

model Employee {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  userId      String          @db.ObjectId
  user        User            @relation("EmployeeUser", fields: [userId], references: [id])
  serviceEmployees ServiceEmployee[] // Explicit join collection
  appointments Appointment[]   @relation("EmployeeAppointments")
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("employee")
}

model ServiceEmployee {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  serviceId  String   @db.ObjectId
  employeeId String   @db.ObjectId
  service    Service  @relation(fields: [serviceId], references: [id])
  employee   Employee @relation(fields: [employeeId], references: [id])
  createdAt  DateTime @default(now())

  @@map("serviceEmployee")
}

model Appointment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  clientId   String   @db.ObjectId
  client     User     @relation("ClientAppointments", fields: [clientId], references: [id])
  serviceId  String   @db.ObjectId
  service    Service  @relation("ServiceAppointments", fields: [serviceId], references: [id])
  employeeId String   @db.ObjectId
  employee   Employee @relation("EmployeeAppointments", fields: [employeeId], references: [id])
  dateTime   DateTime
  status     String   @default("pending") // e.g., "pending", "confirmed", "canceled"
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("appointment")
}

