// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  name          String?
  role          String    @default("client") // "client" or "admin"
  emailVerified Boolean?  @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt 
  image         String?
  sessions      Session[]
  accounts      Account[]
  appointments  Appointment[] @relation("ClientAppointments")

  services     Service[]  @relation("ServiceCreator")
  employeeInfo Employee[] @relation("EmployeeUser")
  customerRisk CustomerRisk? @relation("CustomerRisk")
  @@map("user")
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String   @db.ObjectId
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Service {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  features    String[]        // e.g., ["Shampoo", "Blow Dry"]
  duration    Int             // Duration in minutes
  price       Float
  createdBy   String          @db.ObjectId
  creator     User            @relation("ServiceCreator", fields: [createdBy], references: [id])
  serviceEmployees ServiceEmployee[] // Explicit join collection
  appointments Appointment[]   @relation("ServiceAppointments")
  addons      ServiceAddon[]  @relation("ServiceAddons")
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("service")
}

model Employee {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  userId      String          @db.ObjectId
  user        User            @relation("EmployeeUser", fields: [userId], references: [id])
  serviceEmployees ServiceEmployee[] // Explicit join collection
  appointments Appointment[]   @relation("EmployeeAppointments")
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("employee")
}

model ServiceEmployee {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  serviceId  String   @db.ObjectId
  employeeId String   @db.ObjectId
  service    Service  @relation(fields: [serviceId], references: [id])
  employee   Employee @relation(fields: [employeeId], references: [id])
  createdAt  DateTime @default(now())

  @@map("serviceEmployee")
}

model Appointment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  clientId   String   @db.ObjectId
  client     User     @relation("ClientAppointments", fields: [clientId], references: [id])
  serviceId  String   @db.ObjectId
  service    Service  @relation("ServiceAppointments", fields: [serviceId], references: [id])
  employeeId String   @db.ObjectId
  employee   Employee @relation("EmployeeAppointments", fields: [employeeId], references: [id])
  dateTime   DateTime
  status     String   @default("pending") // e.g., "pending", "confirmed", "canceled", "no_show"
  totalPrice Float?   // Total price including add-ons
  cancelledBy String? @db.ObjectId // Who cancelled the appointment (clientId or adminId)
  cancelledByRole String? // "client", "admin", "staff", "system"
  cancellationReason String? // Reason for cancellation
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  appointmentAddons AppointmentAddon[] @relation("AppointmentAddons")
  payments   Payment[] @relation("PaymentAppointment")

  @@map("appointment")
}

model EmailQueue {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  to          String
  subject     String
  template    String
  data        Json
  status      String   @default("pending") // "pending", "sent", "failed"
  attempts    Int      @default(0)
  lastAttempt DateTime?
  errorMessage String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("emailQueue")
}

model ServiceAddon {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float
  duration    Int      @default(0) // Additional duration in minutes
  serviceId   String   @db.ObjectId
  service     Service  @relation("ServiceAddons", fields: [serviceId], references: [id], onDelete: Cascade)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  appointmentAddons AppointmentAddon[] @relation("ServiceAddonAppointments")

  @@map("serviceAddon")
}

model AppointmentAddon {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  appointmentId String      @db.ObjectId
  appointment  Appointment  @relation("AppointmentAddons", fields: [appointmentId], references: [id], onDelete: Cascade)
  addonId      String       @db.ObjectId
  addon        ServiceAddon @relation("ServiceAddonAppointments", fields: [addonId], references: [id], onDelete: Cascade)
  createdAt    DateTime     @default(now())

  @@unique([appointmentId, addonId])
  @@map("appointmentAddon")
}

model CustomerRisk {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  userId                String   @db.ObjectId
  user                  User     @relation("CustomerRisk", fields: [userId], references: [id], onDelete: Cascade)
  
  // Risk Metrics
  totalBookings         Int      @default(0)
  completedBookings     Int      @default(0)
  cancelledBookings     Int      @default(0)
  noShowBookings        Int      @default(0)
  lastMinuteCancellations Int    @default(0) // Cancellations within 24 hours
  
  // Calculated Scores
  cancellationRate      Float    @default(0) // Percentage of cancelled bookings
  noShowRate            Float    @default(0) // Percentage of no-shows
  lastMinuteCancelRate  Float    @default(0) // Percentage of last-minute cancellations
  riskScore             Float    @default(0) // Overall risk score (0-100)
  riskLevel             String   @default("low") // "low", "medium", "high", "very_high"
  
  // Behavioral Patterns
  averageBookingFrequency Float? // Days between bookings
  lastBookingDate        DateTime?
  lastCancellationDate   DateTime?
  consecutiveCancellations Int   @default(0)
  
  // Risk Mitigation
  requiresApproval      Boolean  @default(false)
  depositRequired       Boolean  @default(false)
  maxAdvanceBookingDays Int?     // Limit how far in advance they can book
  adminNotes            String?  // Admin notes about customer behavior
  
  // Timestamps
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  lastCalculatedAt      DateTime @default(now())

  @@unique([userId])
  @@map("customerRisk")
}

model Payment {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  appointmentId     String   @db.ObjectId
  appointment       Appointment @relation("PaymentAppointment", fields: [appointmentId], references: [id], onDelete: Cascade)
  
  // Stripe Payment Details
  stripePaymentId   String   @unique // Stripe payment intent ID
  stripeChargeId    String?  // Stripe charge ID
  amount            Float    // Amount in pence (Stripe uses smallest currency unit)
  currency          String   @default("gbp")
  
  // Payment Status
  status            String   @default("pending") // "pending", "succeeded", "failed", "canceled", "refunded"
  paymentMethod     String?  // "card", "apple_pay", "google_pay", etc.
  
  // Customer Information
  customerEmail     String
  customerName      String?
  
  // Refund Information
  refundedAmount    Float    @default(0)
  refundReason      String?
  refundedAt        DateTime?
  
  // Stripe Webhook Data
  stripeWebhookData Json?    // Store webhook event data for debugging
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  paidAt            DateTime?
  
  @@map("payment")
}

